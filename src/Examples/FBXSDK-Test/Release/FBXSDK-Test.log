  FBXSDKTest.cpp
FBXSDKTest.cpp : warning C4819: 该文件包含不能在当前代码页(936)中表示的字符。请将该文件保存为 Unicode 格式以防止数据丢失
C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Tools\MSVC\14.11.25503\include\utility(188): warning C4244: “初始化”: 从“double”转换到“float”，可能丢失数据
  c:\users\39317\desktop\git\cxcengine\src\examples\fbxsdk-test\GlobalVariable.h(86): note: 参见对正在编译的函数 模板 实例化“std::pair<const _Kty,_Ty>::pair<const char(&)[13],double,void,0>(_Other1,_Other2 &&) noexcept(false)”的引用
          with
          [
              _Kty=std::string,
              _Ty=float,
              _Other1=const char (&)[13],
              _Other2=double
          ]
  c:\users\39317\desktop\git\cxcengine\src\examples\fbxsdk-test\GlobalVariable.h(80): note: 参见对正在编译的函数 模板 实例化“std::pair<const _Kty,_Ty>::pair<const char(&)[13],double,void,0>(_Other1,_Other2 &&) noexcept(false)”的引用
          with
          [
              _Kty=std::string,
              _Ty=float,
              _Other1=const char (&)[13],
              _Other2=double
          ]
C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Tools\MSVC\14.11.25503\include\utility(216): warning C4244: “初始化”: 从“float”转换到“uint16_t”，可能丢失数据
  C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Tools\MSVC\14.11.25503\include\xmemory0(856): note: 参见对正在编译的函数 模板 实例化“std::pair<const _Kty,_Ty>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,float,void,0>(std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,float> &&) noexcept”的引用
          with
          [
              _Kty=std::string,
              _Ty=uint16_t
          ]
  C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Tools\MSVC\14.11.25503\include\xmemory0(856): note: 参见对正在编译的函数 模板 实例化“std::pair<const _Kty,_Ty>::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,float,void,0>(std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,float> &&) noexcept”的引用
          with
          [
              _Kty=std::string,
              _Ty=uint16_t
          ]
  C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Tools\MSVC\14.11.25503\include\list(761): note: 参见对正在编译的函数 模板 实例化“void std::_Default_allocator_traits<_Alloc>::construct<_Ty,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,float>>(_Alloc &,_Objty *const ,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,float> &&)”的引用
          with
          [
              _Alloc=std::allocator<std::_List_node<std::pair<const std::string,uint16_t>,std::_Default_allocator_traits<std::allocator<std::pair<const std::string,uint16_t>>>::void_pointer>>,
              _Ty=std::pair<const std::string,uint16_t>,
              _Objty=std::pair<const std::string,uint16_t>
          ]
  C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Tools\MSVC\14.11.25503\include\list(759): note: 参见对正在编译的函数 模板 实例化“void std::_Default_allocator_traits<_Alloc>::construct<_Ty,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,float>>(_Alloc &,_Objty *const ,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,float> &&)”的引用
          with
          [
              _Alloc=std::allocator<std::_List_node<std::pair<const std::string,uint16_t>,std::_Default_allocator_traits<std::allocator<std::pair<const std::string,uint16_t>>>::void_pointer>>,
              _Ty=std::pair<const std::string,uint16_t>,
              _Objty=std::pair<const std::string,uint16_t>
          ]
  C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Tools\MSVC\14.11.25503\include\list(996): note: 参见对正在编译的函数 模板 实例化“std::_List_node<_Ty,std::_Default_allocator_traits<_Alloc>::void_pointer> *std::_List_buy<_Ty,_Alloc>::_Buynode<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,float>>(std::_List_node<_Ty,std::_Default_allocator_traits<_Alloc>::void_pointer> *,std::_List_node<_Ty,std::_Default_allocator_traits<_Alloc>::void_pointer> *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,float> &&)”的引用
          with
          [
              _Ty=std::pair<const std::string,uint16_t>,
              _Alloc=std::allocator<std::pair<const std::string,uint16_t>>
          ]
  C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Tools\MSVC\14.11.25503\include\list(996): note: 参见对正在编译的函数 模板 实例化“std::_List_node<_Ty,std::_Default_allocator_traits<_Alloc>::void_pointer> *std::_List_buy<_Ty,_Alloc>::_Buynode<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,float>>(std::_List_node<_Ty,std::_Default_allocator_traits<_Alloc>::void_pointer> *,std::_List_node<_Ty,std::_Default_allocator_traits<_Alloc>::void_pointer> *,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,float> &&)”的引用
          with
          [
              _Ty=std::pair<const std::string,uint16_t>,
              _Alloc=std::allocator<std::pair<const std::string,uint16_t>>
          ]
  C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Tools\MSVC\14.11.25503\include\list(960): note: 参见对正在编译的函数 模板 实例化“void std::list<std::pair<const _Kty,_Ty>,std::allocator<std::pair<const _Kty,_Ty>>>::_Insert<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,float>>(std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const _Kty,_Ty>>>,std::_Iterator_base0>,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,float> &&)”的引用
          with
          [
              _Kty=std::string,
              _Ty=uint16_t
          ]
  C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Tools\MSVC\14.11.25503\include\list(960): note: 参见对正在编译的函数 模板 实例化“void std::list<std::pair<const _Kty,_Ty>,std::allocator<std::pair<const _Kty,_Ty>>>::_Insert<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,float>>(std::_List_unchecked_const_iterator<std::_List_val<std::_List_simple_types<std::pair<const _Kty,_Ty>>>,std::_Iterator_base0>,std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,float> &&)”的引用
          with
          [
              _Kty=std::string,
              _Ty=uint16_t
          ]
  C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Tools\MSVC\14.11.25503\include\xhash(297): note: 参见对正在编译的函数 模板 实例化“void std::list<std::pair<const _Kty,_Ty>,std::allocator<std::pair<const _Kty,_Ty>>>::emplace_front<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,float>>(std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,float> &&)”的引用
          with
          [
              _Kty=std::string,
              _Ty=uint16_t
          ]
  C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Tools\MSVC\14.11.25503\include\unordered_map(290): note: 参见对正在编译的函数 模板 实例化“std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<_Ty>>>,bool> std::_Hash<std::_Umap_traits<_Kty,unsigned short,std::_Uhash_compare<_Kty,_Hasher,_Keyeq>,_Alloc,false>>::emplace<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,float>>(std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,float> &&)”的引用
          with
          [
              _Ty=std::pair<const std::string,uint16_t>,
              _Kty=std::string,
              _Hasher=std::hash<std::string>,
              _Keyeq=std::equal_to<std::string>,
              _Alloc=std::allocator<std::pair<const std::string,uint16_t>>
          ]
  C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Tools\MSVC\14.11.25503\include\unordered_map(290): note: 参见对正在编译的函数 模板 实例化“std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<_Ty>>>,bool> std::_Hash<std::_Umap_traits<_Kty,unsigned short,std::_Uhash_compare<_Kty,_Hasher,_Keyeq>,_Alloc,false>>::emplace<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,float>>(std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,float> &&)”的引用
          with
          [
              _Ty=std::pair<const std::string,uint16_t>,
              _Kty=std::string,
              _Hasher=std::hash<std::string>,
              _Keyeq=std::equal_to<std::string>,
              _Alloc=std::allocator<std::pair<const std::string,uint16_t>>
          ]
  c:\users\39317\desktop\git\cxcengine\src\examples\fbxsdk-test\RobotHand.cpp(59): note: 参见对正在编译的函数 模板 实例化“std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<_Ty>>>,bool> std::unordered_map<std::string,uint16_t,std::hash<_Kty>,std::equal_to<_Kty>,std::allocator<_Ty>>::insert<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,float>,void>(_Valty &&)”的引用
          with
          [
              _Ty=std::pair<const std::string,uint16_t>,
              _Kty=std::string,
              _Valty=std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,float>
          ]
  c:\users\39317\desktop\git\cxcengine\src\examples\fbxsdk-test\RobotHand.cpp(59): note: 参见对正在编译的函数 模板 实例化“std::pair<std::_List_iterator<std::_List_val<std::_List_simple_types<_Ty>>>,bool> std::unordered_map<std::string,uint16_t,std::hash<_Kty>,std::equal_to<_Kty>,std::allocator<_Ty>>::insert<std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,float>,void>(_Valty &&)”的引用
          with
          [
              _Ty=std::pair<const std::string,uint16_t>,
              _Kty=std::string,
              _Valty=std::pair<std::basic_string<char,std::char_traits<char>,std::allocator<char>>,float>
          ]
  正在生成代码
  75 of 2667 functions ( 2.8%) were compiled, the rest were copied from previous compilation.
    0 functions were new in current compilation
    37 functions had inline decision re-evaluated but remain unchanged
  已完成代码的生成
  FBXSDK-Test.vcxproj -> C:\Users\39317\Desktop\git\cxcengine\src\Examples\FBXSDK-Test\Release\FBXSDK-Test.exe
  FBXSDK-Test.vcxproj -> C:\Users\39317\Desktop\git\cxcengine\src\Examples\FBXSDK-Test\Release\FBXSDK-Test.pdb (Full PDB)
